*Comandos base git*

touch .gitignore 					#criar arquivo 'new file' sem extensão
git config --global user.nome "nome"			#configurações dos dados de commits
git config --global user.email "email"			#configurações dos dados de commits
git init 						#iniciar repositório na pasta em questão	
git status						#status de commits pendentes, etc.
git add .						/*
git add *.txt							adicionar arquivo à staging area
git add readme.txt											*/
git rm readme.txt					#retirar arquivo do repositório (deve-se usar ao excluir algum arquivo do diretório)
git restore 'nome do arquivo' ou git restore .		#restaura mudanças realizadas no WORKING DIRECTORY em um ou todos os arquivos
git restore --staged 'nome do arquivo'			#retira arquivo da staging area
git rm -r diretorio					#retirar diretório do repositório
git clean -n						#mostra arquivos untracked que serão removidos pelo comando git clean -f
git clean -f						#apaga permanentemente todos os arquivos untracked do repositório
git checkout -- 'hash' 'nome do arquivo'		#trás o arquivo para o local de trabalho, na versão indicada pelo hash
git checkout -- 'nome do arquivo'			#trás o arquivo para o local de trabalho, na versão do último commit realizado
git revert HEAD~'n'					#reverte e commita o repositório para a versão 'n' vezes anterior ao HEAD
git revert HEAD 'hash'					#reverte e commita o repositório para a versão do hash				
git reset HEAD readme.txt				#retirar arquivo da stagin area
git checkout -- readme.txt				#retorna arquivo para o estado original (último commit realizado)
git commit -m "mensagem"				#adicionar arquivo ao Git Directory
git commit -a -m "mensagem"				#caso não hajam arquivos novos, adiciona as alterações nos arquivos já adicionados ao Git Directory em um único comando (git add embutido)
git commit --amend -m "mensagem"			#adiciona alterações no commit anterior (não cria novo commit)
git diff						#alterações realizadas pré git add 
git diff --staged					#alterações realizadas adicionadas na staging area
git log 						#histórico de commits sem diffs
git log -p						#histórico de commits com diffs
git log -p -2						#histórico de commits com diffs dos 2 últimos commits
git log --pretty=oneline				#histórico de apenas commits e hashs organizados por linha
gitk							#interface gráfica para facilitar visualização de diffs
git tag							#mostra as tags disponíveis, que são chaves simplificadas que apontam para informações de determinado commit
git tag -a 'nome da tag' -m "mensagem"			#cria uma tag na versão atual (último commit). Exemplo: git tag -a -m v1.0 "Versão 1.0"  //cria a tag v1.0
git tag -a 'nome da tag' 'hash do commit'-m "mensagem" 	#cria uma tag na versão com o hash passado
git tag -d 'nome da tag'				#deletar tag
git show 'nome da tag'					#mostra informações sobre uma tag
git checkout 'nome da tag' 				#retorna a versão do repositório para a versão da tag
git checkout 'hash do commit'				#retorna a versão do repositório para a versão do hash
git branch 'nome da branch'				#cria uma branch (ambiente paralelo)
git branch -m "novo nome"				#renomeia a branch
git branch						#lista as branches do repositório em questão
git branch -d 'nome da branch'				#deleta a branch
git checkout 'nome da branch'				#coloca o repositório na branch escolhida na sua versão mais recente
git checkout -b 'nome da branch'			#cria a branch e altera para a mesma em uma única linha de código
git merge 'nome da branch que deseja mesclar'		#mescla a branch desejada com a atualmente selecionada (necessário resolver conflitos e usar git add . e git commit -m "mensagem")
________________________________________________________________________________________________________________________________________________________________________________________________________
*Git em rede local: máquina local como servidor*

Passos: 

Criar repositório (pasta local) na máquina servidor
Compartilhar repositório (pasta local) com pessoas da rede local 	
\\'nome do dispositivo'										#mostra pastas compartilhadas por esse dispositivo no explorador de arquivos	
git init --bare											#inicia repositório git que pode ser acessado pelos integrantes da rede local
git clone file:////'nome do dispositivo servidor'/'caminho do repositório'			#cria um clone do repositório na sua máquina local
git clone file:////'nome do dispositivo servidor'/'caminho do repositório' 'nome opcional'	#cria um clone do repositório na sua máquina local, alterando o nome do repositório (apenas localmente)	

@ Já é possível trabalhar localmente nesse repositório com os comandos estudados anteriormente @

git remote											#retorna o nome do servidor remoto
git remote add origin 'endereço SSH do GitHub'							#adiciona seu repositório local ao GitHub
git remote rm 'nome do repositório'								#desvincula um repositório remoto
git remote rename origin 'nome do repositório'							#renomea repositório remoto
git push 'nome do servidor remoto' 'nome da branch (master, teste)'				#atualiza o servidor remoto com as alterações locais
git push --set-upstream origin 'nome da branch'							#cria branch local remotamente e executa push
git pull 'nome do servidor remoto' 'nome da branch'						#faz um merge, no repositório local, com o repositório remoto
git pull origin master --allow-unrelated-histories						#faz um merge, no repositório local, com o repositório remoto mesmo que com históricos diferentes
git fetch 'nome do servidor remoto' 'nome da branch'						#atualiza o repositório local em relação ao remoto, mas sem alterações no local
________________________________________________________________________________________________________________________________________________________________________________________________________
* Git no GitHub *

Passos:

Criar chave SSH para dar acesso do dispositivo local à interações na sua conta no GitHub. Haverá opção de salvar a chave em um arquivo ou de criar senha para a chave, que seria requerida para cada 
operação no repositório. Não selecionando o arquivo e a senha, por padrão, a chave ssh fica salva na pasta do usuário indicada e as operações podem ser realizadas livremente (opção mais viável)

Copiar chave SSH do arquivo id_rsa.pub (chave pública) e levar para o GitHub, em Account Settings - SSH Keys - Add SSH key. Além da SSH key, pode-se escolher um título para a chave, ex.: Pc Local

Criar repositório no Git Hub

ssh-keygen											#gera chave ssh
git clone 'endereço SSH do github' 								#clona repositório remoto para sua máquina
git clone 'endereço SSH do github' 'nome opcional'						#clona repositório remoto para sua máquina com um nome opcional
git remote											#retorna o nome do servidor remoto no GitHub (por padrão: origin)
git remote add origin 'endereço SSH do GitHub'							#adiciona seu repositório local ao GitHub
git remote rm 'nome do repositório'								#desvincula um repositório remoto
git remote rename origin 'nome do repositório'							#renomea repositório remoto
git push 'nome do servidor remoto' 'nome da branch (master, teste)'				#atualiza o servidor remoto com as alterações locais
git push --set-upstream origin 'nome da branch'							#cria branch local remotamente e executa push
git pull 'nome do servidor remoto' 'nome da branch'						#faz um merge, no repositório local, com o repositório remoto
git pull origin master --allow-unrelated-histories						#faz um merge, no repositório local, com o repositório remoto mesmo que com históricos diferentes
________________________________________________________________________________________________________________________________________________________________________________________________________
* Colaboração com outros desenvolvedores *

Não é possível alterar diretamente projetos de outros desenvolvedores. Daí, algumas ações podem ser executadas para tal colaboração:

Fork (opção disponível em botão presente nos repositórios no GitHub) -> Trazer um repositório de outro usuário para o seu GitHub, tornando-o editável, mas não alterando o repositório original

Pull Request (opção disponível em botão presente nos repositórios forked no GitHub) -> Opção do GitHub que cria um pedido de merge entre o seu repositório forked com as devidas colaborações e o 
repositório original

