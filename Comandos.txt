touch .gitignore 					#criar arquivo 'new file' sem extensão
git config --global user.nome "nome"			#configurações dos dados de commits
git config --global user.email "email"			#configurações dos dados de commits
git init 						#iniciar repositório na pasta em questão	
git status						#status de commits pendentes, etc.
git add .						/*
git add *.txt							adicionar arquivo à staging area
git add readme.txt											*/
git rm readme.txt					#retirar arquivo do repositório (deve-se usar ao excluir algum arquivo do diretório)
git reset HEAD readme.txt				#retirar arquivo da stagin area
git checkout -- readme.txt				#retorna arquivo para o estado original (último commit realizado)
git commit -m "mensagem"				#adicionar arquivo ao Git Directory
git commit --amend -m "mensagem"			#adiciona alterações no commit anterior (não cria novo commit)
git diff						#alterações realizadas pré git add 
git diff --staged					#alterações realizadas adicionadas na staging area
git log 						#histórico de commits sem diffs
git log -p						#histórico de commits com diffs
git log -p -2						#histórico de commits com diffs dos 2 últimos commits
git log --pretty=oneline				#histórico de apenas commits e hashs organizados por linha
gitk							#interface gráfica para facilitar visualização de diffs
git tag							#mostra as tags disponíveis, que são chaves simplificadas que apontam para informações de determinado commit
git tag -a -m 'nome da tag' "mensagem"			#cria uma tag na versão atual (último commit). Exemplo: git tag -a -m v1.0 "Versão 1.0"  //cria a tag v1.0
git tag -a -m 'nome da tag' 'hash do commit' "mensagem" #cria uma tag na versão com o hash passado
git tag -d 'nome da tag'				#deletar tag
git show 'nome da tag'					#mostra informações sobre uma tag
git checkout 'nome da tag' 				#retorna a versão do repositório para a versão da tag
git checkout master					#coloca o repositório na versão mais atual

